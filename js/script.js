// Generated by CoffeeScript 1.9.0
(function() {
  var depth, goCrazy, pageSize, parallaxSize, planes, pos0, resize, tiltSize, transformKey, update, updateMousePos, updatePlane, vadd, vdiv, vdot, vmax, vmin, vmul, vnorm, vnorm2, vscale, vsub, vunit, vzero,
    __hasProp = {}.hasOwnProperty;

  vzero = {
    x: 0,
    y: 0
  };

  vunit = {
    x: 1,
    y: 1
  };

  vadd = function(a, b) {
    return {
      x: b.x + a.x,
      y: b.y + a.y
    };
  };

  vmul = function(a, b) {
    return {
      x: a.x * b.x,
      y: a.y * b.y
    };
  };

  vdiv = function(a, b) {
    return {
      x: a.x / b.x,
      y: a.y / b.y
    };
  };

  vscale = function(a, k) {
    return {
      x: k * a.x,
      y: k * a.y
    };
  };

  vsub = function(a, b) {
    return vadd(a, vscale(b, -1));
  };

  vdot = function(a, b) {
    return a.x * b.x + a.y * b.y;
  };

  vnorm2 = function(a) {
    return vdot(a, a);
  };

  vnorm = function(a) {
    return Math.sqrt(vnorm2(a));
  };

  vmin = function(a, k) {
    return {
      x: Math.min(a.x, k),
      y: Math.min(a.y, k)
    };
  };

  vmax = function(a, k) {
    return {
      x: Math.max(a.x, k),
      y: Math.max(a.y, k)
    };
  };

  pageSize = void 0;

  parallaxSize = void 0;

  depth = 3000;

  tiltSize = vscale(vunit, 100);

  planes = {
    'header .logo': {
      z: -480,
      rescale: true
    },
    'header .slogan': {
      z: -240,
      rescale: true
    },
    '.projects': {
      z: 0
    },
    '.contact': {
      z: 0
    },
    '.background': {
      z: -1000,
      cover: true
    }
  };

  transformKey = 'transform';

  if (document.body.style.webkitTransform != null) {
    transformKey = 'webkitTransform';
  }

  if (document.body.style.mozTransform != null) {
    transformKey = 'mozTransform';
  }

  resize = function() {
    var elPos, elSize, name, plane, ratio, _results;
    pageSize = {
      x: $('body').outerWidth(),
      y: $('body').outerHeight()
    };
    parallaxSize = vscale(pageSize, 0.6);
    console.log('Updating viewport size to', pageSize);
    _results = [];
    for (name in planes) {
      if (!__hasProp.call(planes, name)) continue;
      plane = planes[name];
      if (plane.el == null) {
        plane.el = document.querySelector(name);
      }
      ratio = 1.0 - plane.z / depth;
      if (plane.cover != null) {
        elSize = vadd(vscale(pageSize, ratio), vscale(tiltSize, 2));
        elPos = vsub(vscale(pageSize, (1.0 - ratio) / 2), tiltSize);
        plane.el.style.width = elSize.x + 'px';
        plane.el.style.height = elSize.y + 'px';
        plane.el.style.left = elPos.x + 'px';
        _results.push(plane.el.style.top = elPos.y + 'px');
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  update = function(pos) {
    var name, plane, _results;
    _results = [];
    for (name in planes) {
      if (!__hasProp.call(planes, name)) continue;
      plane = planes[name];
      _results.push(updatePlane(name, plane, pos));
    }
    return _results;
  };

  updatePlane = function(name, plane, pos) {
    var rt, transform, _ref, _ref1, _ref2;
    rt = vscale(vdiv(pos != null ? pos : pos0, parallaxSize), 2);
    rt = vmin(vmax(rt, -1.0), +1.0);
    rt = vmul(rt, tiltSize);
    rt = vsub({
      x: (_ref = plane.x) != null ? _ref : 0,
      y: (_ref1 = plane.y) != null ? _ref1 : 0
    }, rt);
    if (plane.el == null) {
      plane.el = document.querySelector('.' + name);
    }
    transform = 'translate3d(' + Math.floor(rt.x) + 'px, ' + Math.floor(rt.y) + 'px, ' + Math.floor((_ref2 = plane.z) != null ? _ref2 : 0) + 'px)';
    if (plane.rescale != null) {
      transform += ' scale(' + (1.0 - plane.z / depth) + ')';
    }
    if (plane.transform != null) {
      transform += ' ' + plane.transform;
    }
    return plane.el.style[transformKey] = transform;
  };

  pos0 = void 0;

  updateMousePos = function(event) {
    var mousePos, pos;
    if (pageSize.x < 570) {
      return;
    }
    mousePos = {
      x: event.pageX,
      y: event.pageY
    };
    pos = vsub(mousePos, vscale(pageSize, 1 / 2));
    if ((pos0 != null) && vnorm2(vsub(pos0, pos)) > 0) {
      update(pos);
    }
    return pos0 = pos;
  };

  $(document).resize(resize);

  $(document).mousemove(updateMousePos);

  resize();

  update(vzero);

  $(document).ready(function() {
    if (pageSize == null) {
      resize();
    }
    return update(pos0 != null ? pos0 : vzero);
  });

  $.fn.konami = function(callback) {
    var code, numKeys;
    code = ",38,38,40,40,37,39,37,39,66,65$";
    numKeys = code.split(',').length;
    return this.each(function() {
      var kkeys;
      kkeys = [''];
      return $(this).keydown(function(e) {
        kkeys = kkeys.slice(Math.max(0, kkeys.length - numKeys));
        kkeys.push(e.keyCode);
        if ((kkeys.toString() + '$').indexOf(code) >= 0) {
          $(this).unbind('keydown', arguments.callee);
          return callback();
        }
      });
    });
  };

  goCrazy = function() {
    var audioEl, backgroundZ, bananaContainer, bananas, maxBananas, secondsPerBanana, throwBananas, timeStep;
    secondsPerBanana = 1 / 10;
    maxBananas = 200;
    timeStep = 1e-2;
    bananas = [];
    bananaContainer = document.body;
    backgroundZ = planes['.background'].z;
    $(bananaContainer).addClass('bananas');
    console.log("%cBANANAS!", "font-size: 126pt");
    audioEl = $('<audio src="mp3/chimp.mp3" autoplay></audio>');
    audioEl.on('play', function() {
      return setTimeout(throwBananas, 6e3);
    });
    $(bananaContainer).append(audioEl);
    return throwBananas = function() {
      var banana, clean, simulate, t0, tBanana, tClean;
      banana = function() {
        var plane, ratio;
        ratio = 1.0 - backgroundZ / depth;
        plane = {
          el: document.createElement('banana'),
          x: ratio * pageSize.x * (Math.random() - 0.5),
          y: ratio * pageSize.y * (Math.random() - 0.5),
          z: backgroundZ,
          dx: +100 * (2 * Math.random() - 1),
          dy: -100 * (Math.random() + 1),
          dz: +500 * (Math.random() + 1),
          ddy: 80,
          ddx: 0,
          ddz: -2
        };
        bananaContainer.appendChild(plane.el);
        planes['banana' + bananas.length] = plane;
        bananas.push(plane);
        return updatePlane('banana', plane);
      };
      clean = function() {
        return bananas = bananas.filter(function(plane, i) {
          if (plane.y < 2 * pageSize.y && plane.z < depth) {
            return true;
          }
          bananaContainer.removeChild(plane.el);
          delete planes['banana' + i];
          return false;
        });
      };
      simulate = function(t) {
        var i, plane, _results;
        _results = [];
        for (i in bananas) {
          if (!__hasProp.call(bananas, i)) continue;
          plane = bananas[i];
          plane.x += t * (plane.dx + plane.ddx * t / 2);
          plane.y += t * (plane.dy + plane.ddy * t / 2);
          plane.z += t * (plane.dz + plane.ddz * t / 2);
          plane.dx += t * plane.ddx;
          plane.dy += t * plane.ddy;
          plane.dz += t * plane.ddz;
          _results.push(updatePlane('banana', plane));
        }
        return _results;
      };
      t0 = Number(new Date()) / 1e3;
      tBanana = t0;
      tClean = t0;
      return setInterval(function() {
        var t1, _results;
        t1 = Number(new Date()) / 1e3;
        if ((t1 - tBanana) >= secondsPerBanana && bananas.length < maxBananas) {
          banana();
          tBanana = t1;
        }
        if ((t1 - tClean) >= 5 * secondsPerBanana) {
          clean();
          tClean = t1;
        }
        _results = [];
        while ((t1 - t0) > timeStep) {
          simulate(timeStep);
          _results.push(t0 += timeStep);
        }
        return _results;
      }, 50);
    };
  };

  $(document).konami(goCrazy);

  $(document).on('dblclick', function(ev) {
    $(document).unbind('dblclick', arguments.callee);
    return goCrazy();
  });

}).call(this);

//# sourceMappingURL=script.js.map
