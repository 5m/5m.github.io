// Generated by CoffeeScript 1.6.3
(function() {
  var ImageLayer, Layer, TranslationLayer, easeOutQuart, easing, layers, mouseX, pageWidth, parallaxWidth, pendingAnimFrame, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Layer = (function() {
    function Layer(element, options) {
      var defaults;
      defaults = {
        x: 0.0,
        k: 100.0,
        offset: 0.0
      };
      options = $.extend(defaults, options);
      this.$el = $(element);
      this.el = this.$el[0];
      this.width = this.$el.outerWidth();
      this.offset = options.offset;
      this.k = options.k;
      this.x = options.x || this.offset;
      console.log(this.el.className, 'offset:', this.offset, 'k:', this.k, 'x:', this.x);
      this.initialize();
    }

    Layer.prototype.update = function(p) {
      var offset;
      offset = this.k * -p;
      if (Math.abs(offset - this.offset) >= 0) {
        this.offset = offset;
        return this.transform();
      }
    };

    Layer.prototype.initialize = function() {};

    Layer.prototype.transform = function() {};

    return Layer;

  })();

  ImageLayer = (function(_super) {
    __extends(ImageLayer, _super);

    function ImageLayer() {
      _ref = ImageLayer.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ImageLayer.prototype.initialize = function() {
      this.$el.css({
        'background-size': "" + (this.$el.outerWidth() + this.k * 2.0) + "px auto"
      });
      return this.transform();
    };

    ImageLayer.prototype.transform = function() {
      var offset;
      offset = Math.floor(this.x + this.offset);
      return this.el.style.backgroundPosition = "" + offset + "px top";
    };

    return ImageLayer;

  })(Layer);

  TranslationLayer = (function(_super) {
    __extends(TranslationLayer, _super);

    function TranslationLayer() {
      _ref1 = TranslationLayer.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    TranslationLayer.prototype.initialize = function() {
      return this.$el.css({
        left: "" + this.x + "px"
      });
    };

    TranslationLayer.prototype.transform = function() {
      var offset;
      offset = Math.floor(this.offset);
      return this.$el.css({
        'transform': "translate(" + offset + "px, 0)"
      });
    };

    return TranslationLayer;

  })(Layer);

  pageWidth = $('body').outerWidth();

  parallaxWidth = pageWidth * 0.6;

  layers = [
    new ImageLayer('.background', {
      x: -20.0,
      k: 20.0
    }), new TranslationLayer('.content', {
      k: 40.0
    }), new TranslationLayer('.contact', {
      x: -200.0,
      k: 200.0
    }), new TranslationLayer('.projects', {
      x: pageWidth,
      k: 200.0
    })
  ];

  pendingAnimFrame = false;

  mouseX = void 0;

  easeOutQuart = function(d) {
    return function(t) {
      return -(Math.pow(t / d - 1, 4) - 1);
    };
  };

  easing = easeOutQuart(1.8);

  $(document).on('mousemove', function(event) {
    var layer, p, pEased, _i, _len, _results;
    if (mouseX === void 0) {
      mouseX = mouseX;
    }
    mouseX = event.pageX;
    if (pendingAnimFrame) {
      return;
    }
    pendingAnimFrame = true;
    pendingAnimFrame = false;
    p = Math.min(+1.0, Math.max(-1.0, (mouseX - pageWidth / 2) / parallaxWidth * 2));
    pEased = (p / Math.abs(p)) * easing(Math.abs(p));
    _results = [];
    for (_i = 0, _len = layers.length; _i < _len; _i++) {
      layer = layers[_i];
      _results.push(layer.update(pEased));
    }
    return _results;
  });

}).call(this);
